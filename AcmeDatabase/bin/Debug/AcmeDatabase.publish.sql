/*
Deployment script for Acme

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Acme"
:setvar DefaultFilePrefix "Acme"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key 1f7f0802-7fde-4f1b-b893-f3cc71be6828 is skipped, element [dbo].[Property].[Id] (SqlSimpleColumn) will not be renamed to Property';


GO
PRINT N'Creating [dbo].[Address]...';


GO
CREATE TABLE [dbo].[Address] (
    [Id]      INT            IDENTITY (1, 1) NOT NULL,
    [Street1] NVARCHAR (100) NOT NULL,
    [Street2] NVARCHAR (100) NULL,
    [City]    NVARCHAR (50)  NULL,
    [State]   INT            NOT NULL,
    [Zip]     CHAR (5)       NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Property]...';


GO
CREATE TABLE [dbo].[Property] (
    [Property] VARCHAR (50)   NOT NULL,
    [Value]    NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Property] ASC)
);


GO
PRINT N'Creating [dbo].[State]...';


GO
CREATE TABLE [dbo].[State] (
    [Id]    INT      IDENTITY (1, 1) NOT NULL,
    [State] CHAR (2) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [FirstName] NVARCHAR (50)  NOT NULL,
    [LastName]  NVARCHAR (50)  NOT NULL,
    [Birthday]  DATE           NOT NULL,
    [Interests] NVARCHAR (250) NULL,
    [Address]   INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserImage]...';


GO
CREATE TABLE [dbo].[UserImage] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [UserId]      INT            NOT NULL,
    [ImageType]   NVARCHAR (50)  NOT NULL,
    [Base64Image] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[fk_address_state]...';


GO
ALTER TABLE [dbo].[Address] WITH NOCHECK
    ADD CONSTRAINT [fk_address_state] FOREIGN KEY ([State]) REFERENCES [dbo].[State] ([Id]);


GO
PRINT N'Creating [dbo].[fk_user_address]...';


GO
ALTER TABLE [dbo].[User] WITH NOCHECK
    ADD CONSTRAINT [fk_user_address] FOREIGN KEY ([Address]) REFERENCES [dbo].[Address] ([Id]);


GO
PRINT N'Creating [dbo].[fk_userimage_user]...';


GO
ALTER TABLE [dbo].[UserImage] WITH NOCHECK
    ADD CONSTRAINT [fk_userimage_user] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating [dbo].[UserView]...';


GO
CREATE VIEW [dbo].[UserView]
	AS select 
		usr.Id   as "UserId", 
		usr.FirstName   as "FirstName", 
		usr.LastName    as "LastName", 
		usr.Birthday    as "Birthday", 
		usr.Interests   as "Interests", 
		addr.Id         as "AddressId", 
		addr.Street1    as "Street1",
		addr.Street2    as "Street2",
		addr.City       as "City", 
		st.[State]      as "State", 
		addr.Zip        as "Zip"

    from [dbo].[User] usr
        inner join [dbo].[Address] addr on usr.[Address] = addr.Id
        inner join [dbo].[State] st on addr.[State] = st.Id
GO
PRINT N'Creating [dbo].[CreateUser]...';


GO
CREATE PROCEDURE [dbo].[CreateUser]
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@Birthday date,
	@Interests nvarchar(250) = '',
	@Street1 nvarchar(100),
	@Street2 nvarchar(100) = '',
	@City nvarchar(50),
	@State char(2),
	@Zip char(5),
	@ImageType varchar(50) = null,
	@ImageData nvarchar(MAX) = null
AS
	
	SET NOCOUNT ON;

	DECLARE @AddressId int;
	DECLARE @UserId int;
	
	INSERT INTO [dbo].[Address](Street1, Street2, City, State, Zip)
		SELECT @Street1, @Street2, @City, st.id, @Zip
		FROM [dbo].[State] st 
		WHERE [state] = UPPER(@State)

	--Capture id reference to created Address
	SET @AddressId = SCOPE_IDENTITY();

	INSERT INTO [dbo].[User](FirstName, LastName, Birthday, Interests, Address)
	VALUES (@FirstName, @LastName, @Birthday, @Interests, @AddressId)

	--Capture id reference to created User
	SET @UserId = SCOPE_IDENTITY();


	IF @ImageType IS NOT NULL
		INSERT INTO [dbo].[UserImage] (UserId, ImageType, Base64Image)
		values (@UserId, @ImageType, @ImageData)


	select @UserId

RETURN
GO
PRINT N'Creating [dbo].[GetUserImage]...';


GO
CREATE PROCEDURE [dbo].[GetUserImage]
	@UserId int = 0
AS

	If Exists (SELECT Id FROM UserImage WHERE UserId = @UserId)
		BEGIN
			SELECT 
				ui.[ImageType] as "Type",
				ui.[Base64Image] AS "Base64Image"

			FROM
				UserImage ui
		END
	ELSE
		BEGIN
			--Use Default Image Value
			SELECT
				'image/png' as "Type",
				p.Value as "Base64Image"
			FROM
				Property p
			WHERE
				p.Property = 'default_image'

		END

RETURN
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1f7f0802-7fde-4f1b-b893-f3cc71be6828')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1f7f0802-7fde-4f1b-b893-f3cc71be6828')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Address] WITH CHECK CHECK CONSTRAINT [fk_address_state];

ALTER TABLE [dbo].[User] WITH CHECK CHECK CONSTRAINT [fk_user_address];

ALTER TABLE [dbo].[UserImage] WITH CHECK CHECK CONSTRAINT [fk_userimage_user];


GO
PRINT N'Update complete.';


GO
